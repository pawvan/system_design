Creating your own **Content Delivery Network (CDN)** from scratch is a complex but rewarding project. A CDN is a network of distributed servers that caches and delivers content (like images, videos, stylesheets, JavaScript files, etc.) to users from the closest server to their geographical location, improving speed and reducing latency.

To build a simple CDN, you would need to:
1. **Set up edge servers** at different geographical locations.
2. **Cache content** on these edge servers.
3. **Proxy requests** from clients to the closest edge server that has the content, or fall back to the origin server if the content is not cached.
4. **Synchronize content** across multiple edge servers to ensure up-to-date delivery.

For simplicity, we'll focus on a basic CDN implementation with **edge servers** caching content and acting as proxies. We'll use **Python** to create this system. A real-world CDN would involve more sophisticated mechanisms like load balancing, advanced caching strategies, content purging, and security considerations, but we’ll stick to the core concepts.

### Core Components of a Simple CDN:
1. **Origin Server**: The central server where your content is stored (like a main web server or storage).
2. **Edge Servers**: These servers are closer to the client’s geographical location and cache content from the origin server.
3. **Proxying Requests**: When a client makes a request for a resource, the CDN edge server will check if it has the content cached. If not, it fetches the content from the origin and serves it to the client.
4. **Cache Expiration and Invalidations**: We need to manage the cache (e.g., setting TTL—time-to-live—for cached content).

### High-Level Architecture:
1. **Origin Server**: Stores all the original content.
2. **Edge Servers**: A set of servers that cache content closer to users (you could have one or more edge servers in different regions).
3. **Client Requests**: When a client (browser) requests content (like an image), the request is routed to the nearest edge server. If the content isn’t cached there, the edge server fetches it from the origin and caches it for future requests.

### Basic Steps to Create a Simple CDN in Python

Let’s break it down step-by-step.

#### 1. **Setting Up the Origin Server**
This is where the content resides. It can be a simple web server that serves static files.

```python
import os
from http.server import SimpleHTTPRequestHandler, HTTPServer

class OriginServer(HTTPServer):
    def __init__(self, server_address, RequestHandlerClass):
        super().__init__(server_address, RequestHandlerClass)
        self.content_directory = './content'  # The directory where content is stored

class MyRequestHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        # Check if the requested file exists in the 'content' directory
        file_path = os.path.join('./content', self.path.lstrip('/'))
        if os.path.isfile(file_path):
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            with open(file_path, 'rb') as file:
                self.wfile.write(file.read())
        else:
            self.send_response(404)
            self.end_headers()

if __name__ == '__main__':
    server = OriginServer(('localhost', 8080), MyRequestHandler)
    print("Origin server running on http://localhost:8080/")
    server.serve_forever()
```

- **`OriginServer`**: This is a simple HTTP server that listens for requests and serves content from the `./content` directory.
- The **`content`** folder holds the files that will be served by the origin server (e.g., images, CSS, JavaScript).

You can place some test content (e.g., `image.jpg`, `style.css`) inside the `./content` folder.

#### 2. **Setting Up the Edge Server**
Now we’ll set up the edge servers. These servers will:
1. Cache the content they receive.
2. Proxy the request to the origin server if the content is not in the cache.
3. Return the cached content for future requests.

We can use **Python’s `http.server`** for the basic server, and manage caching by saving the content to disk.

```python
import os
import shutil
import time
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer

class EdgeServer(BaseHTTPRequestHandler):
    CACHE_DIR = './cache'

    def do_GET(self):
        """Handle GET requests, cache content, and proxy requests."""
        cache_path = os.path.join(self.CACHE_DIR, self.path.lstrip('/'))
        if os.path.exists(cache_path) and time.time() - os.path.getmtime(cache_path) < 300:
            # Serve cached content if it exists and hasn't expired (5 mins TTL)
            print(f"[Cache Hit] Serving cached content for {self.path}")
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            with open(cache_path, 'rb') as f:
                self.wfile.write(f.read())
        else:
            # Proxy request to the origin server if content isn't cached or is expired
            print(f"[Cache Miss] Fetching from origin server for {self.path}")
            origin_url = f"http://localhost:8080{self.path}"
            response = requests.get(origin_url)

            if response.status_code == 200:
                # Save the response to the cache
                os.makedirs(os.path.dirname(cache_path), exist_ok=True)
                with open(cache_path, 'wb') as f:
                    f.write(response.content)

                # Send the content to the client
                self.send_response(200)
                self.send_header("Content-type", "text/plain")
                self.end_headers()
                self.wfile.write(response.content)
            else:
                self.send_response(404)
                self.end_headers()

    def log_message(self, format, *args):
        # Suppress logging to keep things simple
        return

def start_edge_server(port):
    """Starts the edge server on a given port."""
    server = HTTPServer(('localhost', port), EdgeServer)
    print(f"Edge server running on http://localhost:{port}")
    server.serve_forever()

if __name__ == '__main__':
    # Start the edge server (you could start multiple servers on different ports)
    start_edge_server(8081)  # First edge server on port 8081
```

### Explanation:
- **Caching**: 
  - The `EdgeServer` caches the content it receives for 5 minutes (TTL). It checks the cache first, and if the content is found and hasn't expired, it serves the cached version.
  - If the content is not found or the cache has expired, the server forwards the request to the **origin server** (running on `localhost:8080`) and caches the response.
  
- **Request Handling**:
  - The server listens for incoming HTTP requests and handles them using `do_GET()`.
  - If the content is available in the cache and hasn’t expired, it’s served directly to the client.
  - If the content is not cached or expired, the edge server proxies the request to the origin server, retrieves the content, and caches it for future requests.

- **Multiple Edge Servers**:
  - You can start multiple edge servers on different ports (e.g., 8081, 8082, etc.) to simulate a distributed network of edge servers.

#### 3. **Testing the CDN**

1. **Run the Origin Server**:
   - Start the origin server first:
   ```bash
   python origin_server.py
   ```

2. **Run the Edge Server**:
   - In a separate terminal, start the edge server:
   ```bash
   python edge_server.py
   ```

3. **Make Requests**:
   - Now, you can test the CDN by accessing the edge server. For example, use `curl` or a browser to access `http://localhost:8081/image.jpg`. If the content is not cached, it will be fetched from the origin server and cached on the edge server for subsequent requests.

   ```bash
   curl http://localhost:8081/image.jpg
   ```

   - On the first request, you should see that the edge server fetches the content from the origin server. On subsequent requests, the edge server should serve the cached content.

#### 4. **Scaling Up**
To create a fully scalable CDN, you'll need to consider several factors:
- **Geographical Distribution**: In a real CDN, edge servers are distributed across different regions. For this, you'd typically use cloud services (e.g., AWS, Google Cloud) or deploy your own infrastructure across multiple data centers.
- **Load Balancing**: You can add a load balancer in front of multiple edge servers to distribute requests efficiently.
- **Caching Strategies**: Implement advanced caching strategies (e.g., cache purging, cache invalidation) to handle updates to content.
- **Security**: Implement SSL/TLS to encrypt traffic, and security measures to protect against malicious attacks.

---

### Conclusion

This is a very simple CDN prototype, and there’s much more to consider for a production-grade CDN, such as distributed architecture, advanced caching mechanisms, and security features. However, this basic system demonstrates the fundamental concepts of a CDN: content caching, edge servers, and proxying requests.

As you expand this project, you can implement more complex features like dynamic content routing, cache invalidation, load balancing, SSL termination, and so on.
  
